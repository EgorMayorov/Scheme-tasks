1) 
Функция foldl сворачивает список путем применения к нему и текущему значению аккумулятора (переменная, в которой хранится промежуточный результат, и которая имеет начальное значение) некоторой бинарной операции. При этом функция foldl сворачивает список слева направо. При этом foldl может работать с несколькими списками, они должны быть одной длины, а функция-аргумент должна принимать n+1 аргумент для n списков - по одному элементу из списка плюс аккумулятор. 

Функция ormap применяет переданную функцию-аргумент ко всем спискам, переданным в ormap от первого элемента до последнего. Функция аргумент должна принимать столько же значений, сколько передано списков. Результатом выполнения является #f, если каждый вызов функции-аргумента вернет #f., либо первым значением, которое вернет функция-аргумент и которое не равно #f. Если списки, переданные в функцию, пустые - то результатом будет #f.

Реализация для одного списка.
(define (my-ormap f lst)
  (call/cc
   (lambda (cc-exit)
     (foldl
      (lambda (elem res)
        (let ((app (f elem)))
          (if (not (equal? app #f))
              (cc-exit app)
              (void)
          )
        )
      )
      #f
      lst
     )
   )
  )
)


2)
Синтаксический сахар в языке программирования — это синтаксические возможности, применение которых не влияет на поведение программы, но делает использование языка более удобным для человека. Также это помогает писать код более компактно и читаемо. 

Пример в Scheme:
(define (my-func a b c ...) ...) - с использованием синтаксического сахара
(define func (lambda (a b c ...) ...)) - без использования синтаксического сахара

Плюсы: Это позволяет писать код более компактно и читаемо. 
Минусы: Синтаксический сахар добавляет новые конструкции и усложняет язык без расширения его функционала
